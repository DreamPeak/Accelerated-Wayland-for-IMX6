Accelerated Wayland on IMX6

Description:
Build a Yocto based image with Wayland, Qt, QtWayland plugin,Graphic support, QtWebkit, (Accelerated HTML5)

Created by: Christian Eissler
Last change: 05.06.2014
Cross-Compile System: Ubuntu x86


##########################################################################################################
##########################################################################################################

#Go into the project folder
cd $projectFolder

#Create temp folder
mkdir temp



1.) #######################Installing required tools#######################################################

#Install build tools on the Host system
sudo apt-get install build-essential git autoconf automake libtool
sudo apt-get install nfs-kernel-server
sudo apt-get install crossbuild-essential-armhf
sudo apt-get install gcc-arm-linux-gnueabihf
sudo apt-get install lzop

#Get the toolchain (Not nessecery)
#wget http://releases.linaro.org/14.06/components/toolchain/binaries/gcc-linaro-arm-linux-gnueabihf-4.9-2014.06_linux.tar.xz



2.) ########################Creating Yocto Build with Qt Integration########################################

cd src
mkdir yocto
cd yocto

#Creating the yocto repo
repo init -u https://github.com/Freescale/fsl-community-bsp-platform -b daisy
repo sync

#Creating the meta Qt5 repository
cd source
git clone -b daisy https://github.com/meta-qt5/meta-qt5.git
cd ..

#Copy the yocto configuration
cp ../../configuration_files/local.conf build/conf/
cp ../../configuration_files/bblayers.conf build/conf/

#Configure the yocto build
MACHINE=nitrogen6x ./setup-environment build

#Building the image
bitbake core-image-weston

#Copy image to sdcard:
sudo dd if=tmp/deploy/images/nitrogen6x/core-image-weston-nitrogen6x-$TIMESTAMP.rootfs.sdcard of=/dev/$DEVICE_NAME
cd ..

sudo cp -r tmp/work/cortexa9hf-vfp-neon-poky-linux-gnueabi/qtwayland/5.2.1+gitAUTOINC+573d0ee5ba-r0/image/* /media/$PARTITION_NAME/

sudo cp -r tmp/work/cortexa9hf-vfp-neon-poky-linux-gnueabi/qtwebkit-examples/5.2.1-r0/image/* /media/$PARTITION_NAME/


3.) ################################IMX6 Build Qt SDK###########################################################

bitbake meta-toolchain-qt5
sudo ./tmp/deploy/sdk/poky-eglibc-i686-meta-toolchain-qt5-cortexa9hf-vfp-neon-toolchain-1.6.1.sh


4.) #####################################Setup Qt Creator################################################################

#Install qtcreator
sudo apt-get install qtcreator 

#Go to QCreator folder
nano $QtCreatorDir/qtcreator.sh
#Add before "#! /bin/sh":
source /opt/poky/1.6.1/environment-setup-cortexa9hf-vfp-neon-poky-linux-gnueabi

#Starting QtCreator
./$QtCreatorDir/qtcreator.sh

#Start QtCreator
#Go to Tools/Options/Build & Run/

#In tab Qt Versions add:
#Select qmake in directory /opt/poky/1.6.1/sysroots/i686-pokysdk-linux/usr/bin/qt5/ and set name "Qt IMX6"

#In tab Compilers add:
#Select arm-poky-linux-gnueabi-g++ in directory /opt/poky/1.6.1/sysroots/i686-pokysdk-linux/usr/bin/arm-poky-linux-gnueabi and set name "IMX6 Compiler"

#In tab Debuggers add:
#Select arm-poky-linux-gnueabi-gdb in directory /opt/poky/1.6.1/sysroots/i686-pokysdk-linux/usr/bin/arm-poky-linux-gnueabi and set name "IMX6 Debugger"

#In Menue point Devices add a Generic Linux Device:
#Name = Nitrogen6x
#IP_Adress = "Lookup with ifconfig on the device"
#username = root

#In tab Kits add:
#Name = IMX6_Kit
#Device type = Generic Linux Device
#Device Nitrogen6x
#Sysroot = /opt/poky/1.6.1/sysroots/cortexa9hf-vfp-neon-poky-linux-gnueabi
#Compiler = IMX6 Compiler
#Debugger = IMX6 Debugger
#Qt version = QtIMX6



5.) ###############################Testing####################################################
#Testing after starting the image on the target

#Create SSH connection therfore the IP Adress is needed
PATH+=:/sbin/
ifconfig

#Change password to root
passwd

#Test ssh connection from host
ssh root@$IP_ADRESS




#The Weston compositor can be controlled with the script
/etc/init.d/weston start | stop | restart


#Qt examples are under /usr/share/qt5/examples
#Test a graphic accelerated Qt application with wayland plugin for example
./qt3d/cube -platform wayland-egl

#If you start the application from a remote console and not from the wayland console you must
#add the right tty device to the arguments like
 ./qt3d/cube -platform wayland-egl -tty=/dev/pts/0




#Test Webkit projects from host system using Qt Creator

$projectFolder/src/webView_widget/webView_widget.pro

#Check the Run Configuration in the project settings
#Run application with arguments: -platform wayland-egl -tty=/dev/pts/0

#Add environment variable under Run Environment/Batch Edit...
QT_QPA_EGLFS_PHYSICAL_HEIGHT=480
QT_QPA_EGLFS_PHYSICAL_WIDTH=800
XDG_RUNTIME_DIR=/run/user/root




#Test a QWayland compositor

#On the device go to the examples
cd /usr/share/qt5/examples/qtwayland/

export QT_QPA_EGLFS_PHYSICAL_WIDTH=800
export QT_QPA_EGLFS_PHYSICAL_HEIGHT=480
export XDG_RUNTIME_DIR=/run/user/root

export QT_EGLFS_IMX6_NO_FB_MULTI_BUFFER=1

#QWindow Compositor
./qwindow-compositor/qwindow-compositor -platform eglfs -tty=/dev/tty1 &

#or Qml Compositor
./qml-compositor/qml-compositor -platform eglfs -tty=/dev/tty1 &

#Starting an opengl test application on the compsoitor
./cube -platform wayland-egl -tty=/dev/tty1


#The compositor can also be started into an virtual console
openvt -s -- ./qml-compositor/qml-compositor -platform eglfs -tty=/dev/tty1 &

#Starting an opengl test application on the compsoitor
../qt3d/cube -platform wayland-egl -tty=/dev/pts/0


########################Additonal build Documentation (Not tested successfully!!!)#########################################
###########################################################################################################################

#######################################Additonal setup################################################

#Setup the system time and the rtc 
date --set="15:34:00"
hwclock --systohc

#######################Manual Creating Qt###################################
cd src

git clone https://git.gitorious.org/qt/qt5.git qt5 -b 5.3

./configure -opensource -confirm-license -make libs -device imx6 -device-option CROSS_COMPILE=/opt/linaro-toolchain/bin/arm-linux-gnueabihf- -sysroot $HOME/projects/Wayland_For_IMX6/src/yocto/build/tmp/sysroots/nitrogen6x -prefix $HOME/projects/Wayland_For_IMX6/build/qt_build -no-pch -no-opengl -no-xcb -opengl es2 -v -compile-examples

git clone https://git.gitorious.org/qt/qtjsbackend.git


##########################Build the kernel##########################################################

export LOADADDR=10008000

#Configure the kernel
make ARCH=arm CROSS_COMPILE=/opt/poky/1.6.1/sysroots/i686-pokysdk-linux/usr/bin/arm-poky-linux-gnueabi- nitrogen6x_defconfig

#Build the kernel, modules and the device tree blob
make -j4 ARCH=arm CROSS_COMPILE=/opt/poky/1.6.1/sysroots/i686-pokysdk-linux/usr/bin/arm-poky-linux-gnueabi/arm-poky-linux-gnueabi- uImage modules dtbs

#Write the kernel modules to an specific location
make ARCH=arm CROSS_COMPILE=/opt/poky/1.6.1/sysroots/i686-pokysdk-linux/usr/bin/arm-poky-linux-gnueabi/arm-poky-linux-gnueabi- INSTALL_MOD_PATH=output modules_install


########################################################################################################










